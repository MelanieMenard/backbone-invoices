/*******************************************************************/
/*    Invoice item view
/*******************************************************************/

InvoiceApp.InvoiceItemView = Backbone.Marionette.ItemView.extend({

  template: InvoiceApp.Templates['invoice-item'],

  // backbone templateHelpers allow to pass custom data to the template beside the default model data
  templateHelpers: function() {
    // display date in local format, not ISO format from server
    var date = new Date();
    date.setTime(Date.parse(this.model.get('date')));
    var formattedDate = date.toLocaleDateString();
    return {
      formattedDate: formattedDate
    };
  },

  behaviors: {
    // prevent backbone from wrapping the template inside an extra div
    // only remove the wrapper if the template has one inbuilt (i.e. a single top child element)
    removeTemplateWrapperBehavior: {
      behaviorClass: RemoveTemplateWrapperBehavior
    }
  },

  ui: { 
    edit: '.invoice-edit',
    togglePaid: '.invoice-toggle-paid'
  },

  events: { 
    'click @ui.edit': 'onInvoiceEditClicked',
    'click @ui.togglePaid': 'onTogglePaidClicked' 
  },

  modelEvents: {
    // rerender the invoice when a model attribute changes
    'change': 'render'
  },

  // data passed on by parent view via childViewOptions
  appData: null,

  initialize: function(options) {
    this.appData = options.appData;
  },

  onInvoiceEditClicked: function(e) {
    // event will  be caught by the invoice collection 
    // invoice collection will then fire an event on the router radio telling the app to route to the edit-invoice view
    // do it that way to avoid attaching the radio to every single invoice item view.
    this.triggerMethod('edit:invoice');
  },

  onTogglePaidClicked: function(e) {

    // toggle paid state on invoice model
    this.model.togglePaidState();

    // capture 'this' for callbacks
    var me = this;
    // save to server
    // model.save method wrecks the Id by converting it to a string so use Backbone.sync
    Backbone.sync(
      'update',
      this.model,
      {
        headers: this.appData.requestHeader,
        // by default backbone syncs a model to collection_url/:model_id
        // but we want to use the custom model attribute, not the autogenerated backbone id
        url: this.appData.invoices.url+'/'+this.model.get('id'),
        error: function (model, response, options) {
          me.updateInvoiceError(model, response, options);
        }
      }
    );
  },

  updateInvoiceError: function(model, response, options) {
    var formattedError = this.formatErrorMessage(response);
    var message = formattedError.errorMessage;
    alert(message);
  }

});
// Copy the errorHandler mixin methods to InvoiceApp.InvoiceAddView
_.extend(InvoiceApp.InvoiceItemView.prototype, ErrorHandlerMixin);
